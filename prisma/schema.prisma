// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  name            String?
  email           String? @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        Session[]

  conversation    Conversation[] @relation(name: "ConversationToUser")

  seenMessageIds  String[]

  accounts        Account[]
  messages        Message[]
  reactions       Reaction[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           String  @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String  @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}


model Conversation {
  id                String @id @default(uuid())
  createdAt         DateTime @default(now())
  lastMessageAt     DateTime @default(now())
  name              String?
  isGroup           Boolean?

  messageId         String
  messages          Message[]

  userId           String[]

  users User[] @relation(name: "ConversationToUser")
}


model Message {
  id                String @id @default(uuid())
  body              String?
  image             String?
  isDeleted         Boolean? @default(false)
  deletedAt         DateTime? @default(now())
  createdAt         DateTime @default(now())
  isEdited          Boolean?

  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  reactions         Reaction[]
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reaction {
  id                String @id @default(uuid())
  userId            String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId         String
  message          Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}
